{"ast":null,"code":"var _jsxFileName = \"/home/karishma/Desktop/employee_database/Client/employee_data/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LOAD_USERS } from \"./Graphql/Queries\";\nimport './App.css';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport Form from \"./Component/Form\"; // const errorLink = onError(({ graphqlErrors, networkError }) => {\n//   if (graphqlErrors) {\n//     graphqlErrors.map(({ message, location, path }) => {\n//       alert(`Graphql error ${message}`);\n//     });\n//   }\n// });\n// const link = from([\n//   errorLink,\n//   new HttpLink({\n//     uri: \"http://localhost:5000/graphql\", credentials: 'same-origin',\n//     credentials: true\n//   }),\n// ]);\n// const client = new ApolloClient({\n//   cache: new InMemoryCache(),\n//   uri: \"http://localhost:5000/graphql\",\n//   credentials: 'same-origin',\n//   credentials: true\n// });\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        clients: {\n          merge(existing, incoming) {\n            return incoming;\n          }\n\n        },\n        prohects: {\n          merge(existing, incoming) {\n            return incoming;\n          }\n\n        }\n      }\n    }\n  }\n});\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache\n});\n\nfunction App() {\n  _s();\n\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(LOAD_USERS);\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    if (data) {\n      setUsers(data.getAllUsers);\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n      client: client,\n      children: /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"INVcvgjol47Nx01vrgAq9x9IhFs=\", false, function () {\n  return [useQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","useQuery","gql","LOAD_USERS","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","from","onError","Form","cache","typePolicies","Query","fields","clients","merge","existing","incoming","prohects","client","uri","App","error","loading","data","users","setUsers","getAllUsers"],"sources":["/home/karishma/Desktop/employee_database/Client/employee_data/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useQuery, gql } from \"@apollo/client\";\nimport { LOAD_USERS } from \"./Graphql/Queries\";\nimport './App.css';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport Form from \"./Component/Form\";\n\n\n// const errorLink = onError(({ graphqlErrors, networkError }) => {\n//   if (graphqlErrors) {\n//     graphqlErrors.map(({ message, location, path }) => {\n//       alert(`Graphql error ${message}`);\n//     });\n//   }\n// });\n\n// const link = from([\n//   errorLink,\n//   new HttpLink({\n//     uri: \"http://localhost:5000/graphql\", credentials: 'same-origin',\n//     credentials: true\n//   }),\n// ]);\n\n// const client = new ApolloClient({\n//   cache: new InMemoryCache(),\n//   uri: \"http://localhost:5000/graphql\",\n//   credentials: 'same-origin',\n//   credentials: true\n// });\n\nconst cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        clients: {\n          merge(existing, incoming) {\n            return incoming;\n          }\n        },\n        prohects: {\n          merge(existing, incoming) {\n            return incoming;\n          }\n        }\n      }\n    }\n  }\n});\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:5000/graphql',\n  cache,\n})\nfunction App() {\n\n  const { error, loading, data } = useQuery(LOAD_USERS);\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    if (data) {\n      setUsers(data.getAllUsers);\n    }\n  }, [data]);\n\n  return (\n    <div>\n      <ApolloProvider client={client}>\n        <Form />\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAO,WAAP;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,QAJF,EAKEC,IALF,QAMO,gBANP;AAOA,SAASC,OAAT,QAAwB,2BAAxB;AACA,OAAOC,IAAP,MAAiB,kBAAjB,C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,KAAK,GAAG,IAAIN,aAAJ,CAAkB;EAC9BO,YAAY,EAAE;IACZC,KAAK,EAAE;MACLC,MAAM,EAAE;QACNC,OAAO,EAAE;UACPC,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;YACxB,OAAOA,QAAP;UACD;;QAHM,CADH;QAMNC,QAAQ,EAAE;UACRH,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;YACxB,OAAOA,QAAP;UACD;;QAHO;MANJ;IADH;EADK;AADgB,CAAlB,CAAd;AAmBA,MAAME,MAAM,GAAG,IAAIhB,YAAJ,CAAiB;EAC9BiB,GAAG,EAAE,+BADyB;EAE9BV;AAF8B,CAAjB,CAAf;;AAIA,SAASW,GAAT,GAAe;EAAA;;EAEb,MAAM;IAAEC,KAAF;IAASC,OAAT;IAAkBC;EAAlB,IAA2BxB,QAAQ,CAACE,UAAD,CAAzC;EACA,MAAM,CAACuB,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,EAAD,CAAlC;EAEAD,SAAS,CAAC,MAAM;IACd,IAAI0B,IAAJ,EAAU;MACRE,QAAQ,CAACF,IAAI,CAACG,WAAN,CAAR;IACD;EACF,CAJQ,EAIN,CAACH,IAAD,CAJM,CAAT;EAMA,oBACE;IAAA,uBACE,QAAC,cAAD;MAAgB,MAAM,EAAEL,MAAxB;MAAA,uBACE,QAAC,IAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAOD;;GAlBQE,G;UAE0BrB,Q;;;KAF1BqB,G;AAoBT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}